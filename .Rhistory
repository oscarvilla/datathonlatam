corrplot(correlaciones, order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE)
library(corrplot)
corrplot(correlaciones, order = "original", tl.cex = 0.6, tl.col = "black", type = "lower")
library(corrplot)
corrplot(correlaciones, order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE)
?ylim
library(corrplot)
corrplot(correlaciones, order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
View(correlaciones)
library(corrplot)
corrplot(correlaciones[1:38, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(corrplot)
corrplot(correlaciones[38:43, 1:38], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(corrplot)
corrplot(correlaciones[1:38, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
corrplot(correlaciones[1:38, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(corrplot)
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(corrplot)
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(qgraph)
qgraph(cor(correlaciones[1:37, 38:43]), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8)
library(qgraph)
qgraph(cor(correlaciones[1:37, 38:43]), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8)
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8)
?qgraph
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8, groups = list(educacion = c(38:43), pib = c(1:37)))
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="circle", vsize=8, groups = list(educacion = c(38:43), pib = c(1:37)))
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="groups", vsize=8, groups = list(educacion = c(38:43), pib = c(1:37)))
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8, groups = list(educacion = c(38:43), pib = c(1:37)))
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8, groups = list(Educación = c(38:43), PIB = c(1:37)))
correlate <- cor(df_limpio[, c(39:44)], df_limpio[, c(2:38)])
library(gplots)
heatmap.2(correlate, dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none', margins = c(4, 13))
correlate
View(correlaciones)
correlate <- cor(df_limpio[, c(39:44)], df_limpio[, c(2:38)])
library(gplots)
heatmap.2(correlate, dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none', margins = c(4, 13))
correlate
plot(density(correlaciones))
plot(density(correlaciones))
ablin(coef=c(0, 0))
plot(density(correlaciones))
line(coef=c(0, 0))
?vline
?abline
plot(density(correlaciones))
abline(a = 0, b = 0)
plot(density(correlaciones))
abline(a = 0, b = 1)
plot(density(correlaciones))
abline(a = 0, b = 2)
plot(density(correlaciones))
abline(a = 0, b = 4)
plot(density(correlaciones))
abline(a = 0, b = 8)
plot(density(correlaciones))
abline(a = 0, b = 10)
plot(density(correlaciones))
abline(a = 0, b = 12)
plot(density(correlaciones))
abline(a = 0, b = 20)
plot(density(correlaciones))
abline(a = 0, b = 100)
plot(density(correlaciones))
abline(a = 0, b = 10000)
plot(density(correlaciones))
abline(a = 0, b = 10000)
abline(a = 1, b = 10000)
plot(density(correlaciones))
abline(a = c(0, 1), b = c(10000, 10000))
plot(density(correlaciones))
abline(a = 0, b = 10000)
plot(density(correlaciones))
?nls
plot(density(df_limpio$proy))
plot(density(df_limpio$X2))
plot(density(df_limpio$X3))
plot(density(df_limpio$X4))
plot(density(df_limpio$X5))
View(df_limpio)
density(df_limpio[, 4])
str(density(df_limpio[, 4]))
d <- density(df_limpio[, 4])
dx <- density(df_limpio[, 4])$x
d == dx
dx
d
d$x == dx
all.equal(d$x, dx)
for(i in 4:38){
dens <- cbind(dens, data.frame(x = density(df_limpio[, i])[x], y = density(df_limpio[, i])[x]))
}
dens <- data.frame()
for(i in 4:38){
dens <- cbind(dens, data.frame(x = density(df_limpio[, i])[x], y = density(df_limpio[, i])[y]))
}
d$y
dens <- data.frame()
for(i in 4:38){
dens <- cbind(dens, data.frame(x = density(df_limpio[, i])$x, y = density(df_limpio[, i])$y))
}
d4 <- density(df_limpio[, 4])
d5 <- density(df_limpio[, 5])
length(d4$x)
length(d5$x)
length(d5$y)
length(d4$y)
dens <- data.frame()
for(i in 4:38){
temp <- data.frame(x = density(df_limpio[, i])$x, y = density(df_limpio[, i])$y)
dens <- cbind(dens, temp)
}
View(temp)
dens <- list()
for(i in 4:38){
dens[i] <- data.frame(x = density(df_limpio[, i])$x, y = density(df_limpio[, i])$y)
}
dens <- list()
for(i in 4:38){
j <- i - 3
dens[j] <- data.frame(x = density(df_limpio[, i])$x, y = density(df_limpio[, i])$y)
}
library(ggplot2)
ggplot(dens[1], aes(x = x, y = y)) + geom_line()
library(ggplot2)
d <- dens[1]
ggplot(d, aes(x = x, y = y)) + geom_line()
library(ggplot2)
d <- as.data.frame(dens[1])
ggplot(d, aes(x = x, y = y)) + geom_line()
View(d)
dens[[1]]
dens[1]
dens[1:2]
rm(i)
rm(j)
rm(dx)
rm(d)
rm(dens)
rm(d4)
rm(d5)
rm(temp)
library(ggplot2)
ggplot(data = df_limpio, aes(x = X2)) + geom_density()
library(ggplot2)
ggplot(data = df_limpio, aes(x = X2)) + geom_density() + geom_density(aes(x = X3))
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = X2)) + geom_density(aes(x = X3))
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = X2), col = "red") + geom_density(aes(x = X3), col = "blue")
colours
colours()
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = X2), col = "red") + geom_density(aes(x = X3), col = "aliceblue") + geom_density(aes(x = X4), col = "antiquewhite") + geom_density(aes(x = X5), col = "aquamarine1")
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = c(X2, X3)), col = c("red", "blue"))
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = c(X2, X3)), col = x)
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = c(X2, X3)))
colours()
library(ggplot2)
ggplot(data = df_limpio) + geom_density(aes(x = X2)) + geom_density(aes(x = X3)) + geom_density(aes(x = X4)) + geom_density(aes(x = X5)) + geom_density(aes(x = X6)) + geom_density(aes(x = X8)) + geom_density(aes(x = X9))
library(caret)
pibTrans <- BoxCoxTrans(df_limpio$X2)
pibTrans
library(caret)
pibTrans <- BoxCoxTrans(df_limpio[, 4:38])
View(df_limpio)
?preProcess
preProcess(df_limpio[, 4:38])
preProcess(df_limpio[, 4:38], method = c("BoxCox", "center", "scale"))
library(caret)
trans <- preProcess(df_limpio[, 4:38], method = c("BoxCox", "center", "scale"))
trans
transformados <- predict(trans, df_limpio[, 4:38])
View(transformados)
View(df_limpio)
library(caret)
trans <- preProcess(df_limpio[, 2:38], method = c("BoxCox", "center", "scale"))
trans
transformados <- predict(trans, df_limpio[, 2:38])
View(transformados)
acr_tecpro <- cbind(df_limpio$departamento, transformados, df_limpio$acr_tecpro)
View(acr_tecpro)
acr_tecpro <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
View(acr_tecpro)
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
acr_tecpro <- df_limpio[, c(1:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
acr_tecpro <- df_limpio[, c(1:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, df_limpio[, c(1:39)]))
abline(a = 0, b = 1)
View(acr_tecpro)
acr_tecpro <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, df_limpio[, c(1:39)]))
abline(a = 0, b = 1)
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
model1 <- lm(acr_tecpro ~ ., data = acr_tecpro1)
summary(model1)
View(acr_tecpro1)
acr_tecpro <- df_limpio[, c(1:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, df_limpio[, c(1:38)]))
abline(a = 0, b = 1)
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
model1 <- lm(acr_tecpro ~ ., data = acr_tecpro1)
summary(model1)
plot(acr_tecpro$acr_tecpro, predict(model, acr_tecpro1[, 1:38]))
abline(a = 0, b = 1)
---
title: "Análisis exploratorio de datos2"
output:
html_document: default
html_notebook: default
pdf_document: default
---
## 1. Obtener los datos
### 1.1. Datos sobre educación:
Vamos a obtener los datos sobre acreditación por departamentos, años y nivel de educación teniendo en cuenta, a falta de la definición de una variable proxy en el [documento](http://www.mineducacion.gov.co/1759/w3-article-329021.html) del MEN, la acreditación en los diferentes niveles educativos nos da cuenta tanto de la diversidad de la propuesta educativa como de su calidad.
Dado que provienen de distintas tablas, es necesario verificar que los años coincidan, los departamentos y su escritura y los niveles educativos:
```{r, get_data, cache=TRUE}
setwd("~/Documents/datathonlatam") ## setting dir
library(readr)
arc <- list.files("./datasets/educacion_superior", pattern = ".csv") ## creating list files csv
acreditacion <- read_csv(paste("./datasets/educacion_superior", arc[1], sep = "/"))
names(acreditacion) <- c("departamento", "anio",
paste("acr", gsub("tecnica profesional", "tecpro", tolower(names(acreditacion)[3:8])), sep = "_") )
```
Una ves juntamos todos los datos, vamos a verificar que estén todos los departamentos, de cuáles años hay registros y los niveles educativos presentes:
```{r, merging, cache=TRUE}
departamentos <- sort(unique(acreditacion$departamento))
print("Tenemos los siguientes departamentos:")
departamentos
print("Para los años:")
sort(unique(acreditacion$anio))
print("Y para los niveles educativos:")
colnames(acreditacion[3:8])
saveRDS(departamentos, "./departamentosRDS")
```
### 1.2. Obtener los datos sobre PIB:
```{r, import_PIB, cache=TRUE}
totalpib <- data.frame() ## empty data frame to fill
k <- 0 ## a counter for naming by department from departamentos var
departamentos <- readRDS("./departamentosRDS")
library(readxl) ## library needed to read xls
for(i in seq(from = 2, to = 66, by = 2)) { ## We'll read even sheets (by number, not by name)
pib <- read_excel("~/Documents/datathonlatam/datasets/Copia de PIB_Departamentos_2015provisional.xls",
sheet = i, skip = 5, range = "A7:Q59") ## read just a range of the sheet
pib <- pib[!is.na(pib[, 1]) & !is.na(pib[, 2]), c(1, 2:16)] ## delete NAs and keep 2010 to 2015
pib <- data.frame(t(pib)) ## transpose
k <- k + 1 ## increase 'iterator' of departamentos names
pib$departamento <- departamentos[k] ## namig the departamento
pib$anio <- rownames(pib) ## anio as value not just as rowname
pib <- pib[c(2:nrow(pib)), c(48:49, 1:47)] ## erasing first row and reordering cols-vars
totalpib <- rbind(totalpib, pib) ## stacking results in one data frame
}
rm(pib) ## erase inecessary data frame
totalpib[, 3:ncol(totalpib)] <- apply(totalpib[, 3:ncol(totalpib)], 2, as.integer) ## data as numeric
print("los departamentos que quedan son:")
sort(unique(totalpib$departamento))
print("Y los años:")
sort(unique(totalpib$anio))
library(readr)
dummy_names_PIB <- as.data.frame(read_csv("~/Documents/datathonlatam/dummy_names_PIB.csv")[, c(1:2)])
print("Dado que no podemos conservar el nombre completo-descriptivo de cada variable, dejamos una tabla en el que se relacionan las convenciones y el nombre original")
dummy_names_PIB
```
### 1.3. Obtener los datos sobre proyecciones poblacionales del DANE según censo 2005:
```{r, censo, cache=TRUE, message=FALSE}
library(readr)
dane <- read_csv("./datasets/censo 2005/proyeccion poblacion DANE 2005.csv")
totaldane <- data.frame()
for( i in 1:nrow(dane)){
temp <- data.frame(departamento = dane[i, 1],
anio = seq(1985, 2020),
proy = as.numeric(dane[i, 2:ncol(dane)]))
totaldane <- rbind(totaldane, temp)
}
rm(list = c("dane", "temp"))
print("los departamentos que quedan son:")
sort(unique(totaldane$departamento))
print("Y los años:")
sort(unique(totaldane$anio))
```
### 1.4. Juntar todos los datos:
Al tener para todos los sets de datos los mismos 33 departamentos (BOGOTA D.C.  se considera un departamento a parte de CUNDINAMARCA), sólo se vana conservar los datos de los años que coincidan en todos: para el caso, acreditación va a ser el límite de los demás. Y por tanto vamos a tener datos solamente entre 2010 y 2015.
```{r, join_all, echo=FALSE, cache=TRUE}
df <- merge(merge(totaldane, totalpib), acreditacion)
df$departamento <- as.factor(df$departamento)
df$proy <- as.integer(df$proy)
str(df)
```
## 2. Análisis exploratorio de datos:
### 2.1. Eliminando variables PIB redundantes:
Ahora que tenemos todos los datos juntos, lo primero que necesitamos es remover algunas variables del PIB que son suma de otras (X1 es la suma de X2 a X6, X7 es la suma de X8 a X11 ... Las que aparecen relacionadas en mayúscula son la suma de las isguientes en minúsculas, de acuerdo con la tabla presentada en el  apartado [1.2. Obtener los datos sobre PIB:]) ya que son redundantes.
```{r, correlaciones, echo=FALSE, cache=TRUE}
df_limpio <- df[, -c(4, 10, 15, 18, 23, 26, 30, 36, 40, 48:50)]
correlaciones <- cor(df_limpio[, c(2:ncol(df_limpio))])
```
### 2.2. Revisando correlaciones:
Una vez retiradas podemos revisar las correlaciones entre todas las variables del PIB y las de acreditación en educación superior por nivel educativo; dejando por fuera los datos no numéricos: los nombres de los departamentos.
```{r, corrplots, echo=FALSE, cache=TRUE}
library(corrplot)
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
```
```{r, echo=FALSE}
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8, groups = list(Educación = c(38:43), PIB = c(1:37)))
```
```{r, reduct_correlations_spaces, echo=FALSE}
correlate <- cor(df_limpio[, c(39:44)], df_limpio[, c(2:38)])
library(gplots)
heatmap.2(correlate, dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none', margins = c(4, 13))
correlate
```
Las correlaciones negativas son pocas y no muy altas: la correlación negativa más alta (más negativa) es `r min(correlaciones)`, mientras que postivas hay muchas, siendo la más alta `r max(correlaciones)`
Veamos la dsitribución de las correlaciones:
```{r, distribucion_corr, echo=FALSE, cache=TRUE}
plot(density(correlaciones))
```
Tenemos un grupo mayoritario de correlaciones cercanas al 1 y otro grupo de correlaciones cercanas al 0, y pocas negativas: preliminarmente puede decirse que a medida que crece el PIB en sus diferentes rubros, incrementa el número de programas de educación superior acreditados.
## 3. Modelo generativo:
Nos referimos a un modelo generativo como aquel que permite a establecer la medida en que las variables independientes o conocidas determinan la variable dependiente o a predecir. En el presente caso, un modelo generativo permite predecir el número de programas acreditados para un nivel educativo a partir de los datos de PIB del departamento: si conocemos los datos de PIB del departamento podemos predecir o inferir el número de programas de cierto nivel académico acreditados en el departamento.
Lo importante de este tipo de modelo es que permite extraer la medida en que cada uno de los rubros del PIB contribuye al aumento o decremento del número de programas acreditados.
### 3.1. Normalizando los datos
Vamos a aplicar normalización, escalado y transofrmaciones BoxCox si son posibles a los datos, excluyendo los nombres de departamentos.
```{r normaliz, echo=FALSE, cache=TRUE}
library(caret)
trans <- preProcess(df_limpio[, 2:38], method = c("BoxCox", "center", "scale"))
trans
```
Ya que conocemos los preprocesamientos calculados, para centrar y escalar, pero sobre todo  para mejorar los sesgos de las distribuciones por medio de coeficientes BoxCox, los aplicamos.
```{r}
transformados <- predict(trans, df_limpio[, 2:38])
```
Modelo sin transformaciones
```{r}
acr_tecpro <- df_limpio[, c(1:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, df_limpio[, c(1:38)]))
abline(a = 0, b = 1)
```
Modelo con transformaciones
```{r}
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
model1 <- lm(acr_tecpro ~ ., data = acr_tecpro1)
summary(model1)
plot(acr_tecpro$acr_tecpro, predict(model, acr_tecpro1[, 1:38]))
abline(a = 0, b = 1)
```
setwd("~/Documents/datathonlatam") ## setting dir
library(readr)
arc <- list.files("./datasets/educacion_superior", pattern = ".csv") ## creating list files csv
acreditacion <- read_csv(paste("./datasets/educacion_superior", arc[1], sep = "/"))
names(acreditacion) <- c("departamento", "anio",
paste("acr", gsub("tecnica profesional", "tecpro", tolower(names(acreditacion)[3:8])), sep = "_") )
departamentos <- sort(unique(acreditacion$departamento))
print("Tenemos los siguientes departamentos:")
departamentos
print("Para los años:")
sort(unique(acreditacion$anio))
print("Y para los niveles educativos:")
colnames(acreditacion[3:8])
saveRDS(departamentos, "./departamentosRDS")
setwd("~/Documents/datathonlatam") ## setting dir
library(readr)
arc <- list.files("./datasets/educacion_superior", pattern = ".csv") ## creating list files csv
acreditacion <- read_csv(paste("./datasets/educacion_superior", arc[1], sep = "/"))
names(acreditacion) <- c("departamento", "anio",
paste("acr", gsub("tecnica profesional", "tecpro", tolower(names(acreditacion)[3:8])), sep = "_") )
departamentos <- sort(unique(acreditacion$departamento))
print("Tenemos los siguientes departamentos:")
departamentos
print("Para los años:")
sort(unique(acreditacion$anio))
print("Y para los niveles educativos:")
colnames(acreditacion[3:8])
saveRDS(departamentos, "./departamentosRDS")
totalpib <- data.frame() ## empty data frame to fill
k <- 0 ## a counter for naming by department from departamentos var
departamentos <- readRDS("./departamentosRDS")
library(readxl) ## library needed to read xls
for(i in seq(from = 2, to = 66, by = 2)) { ## We'll read even sheets (by number, not by name)
pib <- read_excel("~/Documents/datathonlatam/datasets/Copia de PIB_Departamentos_2015provisional.xls",
sheet = i, skip = 5, range = "A7:Q59") ## read just a range of the sheet
pib <- pib[!is.na(pib[, 1]) & !is.na(pib[, 2]), c(1, 2:16)] ## delete NAs and keep 2010 to 2015
pib <- data.frame(t(pib)) ## transpose
k <- k + 1 ## increase 'iterator' of departamentos names
pib$departamento <- departamentos[k] ## namig the departamento
pib$anio <- rownames(pib) ## anio as value not just as rowname
pib <- pib[c(2:nrow(pib)), c(48:49, 1:47)] ## erasing first row and reordering cols-vars
totalpib <- rbind(totalpib, pib) ## stacking results in one data frame
}
rm(pib) ## erase inecessary data frame
totalpib[, 3:ncol(totalpib)] <- apply(totalpib[, 3:ncol(totalpib)], 2, as.integer) ## data as numeric
print("los departamentos que quedan son:")
sort(unique(totalpib$departamento))
print("Y los años:")
sort(unique(totalpib$anio))
library(readr)
dummy_names_PIB <- as.data.frame(read_csv("~/Documents/datathonlatam/dummy_names_PIB.csv")[, c(1:2)])
print("Dado que no podemos conservar el nombre completo-descriptivo de cada variable, dejamos una tabla en el que se relacionan las convenciones y el nombre original")
dummy_names_PIB
library(readr)
dane <- read_csv("./datasets/censo 2005/proyeccion poblacion DANE 2005.csv")
totaldane <- data.frame()
for( i in 1:nrow(dane)){
temp <- data.frame(departamento = dane[i, 1],
anio = seq(1985, 2020),
proy = as.numeric(dane[i, 2:ncol(dane)]))
totaldane <- rbind(totaldane, temp)
}
rm(list = c("dane", "temp"))
print("los departamentos que quedan son:")
sort(unique(totaldane$departamento))
print("Y los años:")
sort(unique(totaldane$anio))
df <- merge(merge(totaldane, totalpib), acreditacion)
df$departamento <- as.factor(df$departamento)
df$proy <- as.integer(df$proy)
str(df)
df_limpio <- df[, -c(4, 10, 15, 18, 23, 26, 30, 36, 40, 48:50)]
correlaciones <- cor(df_limpio[, c(2:ncol(df_limpio))])
library(corrplot)
corrplot(correlaciones[1:37, 38:43], order = "original", tl.cex = 0.6, tl.col = "black", type = "lower", diag = FALSE, title = "Correlaciones entre todas las variables")
library(qgraph)
qgraph(cor(correlaciones), shape="circle",
posCol="darkblue", negCol="darkred",
layout="spring", vsize=8, groups = list(Educación = c(38:43), PIB = c(1:37)))
correlate <- cor(df_limpio[, c(39:44)], df_limpio[, c(2:38)])
library(gplots)
heatmap.2(correlate, dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none', margins = c(4, 13))
correlate
plot(density(correlaciones))
library(caret)
trans <- preProcess(df_limpio[, 2:38], method = c("BoxCox", "center", "scale"))
trans
transformados <- predict(trans, df_limpio[, 2:38])
acr_tecpro <- df_limpio[, c(1:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, df_limpio[, c(1:38)]))
abline(a = 0, b = 1)
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados, acr_tecpro = df_limpio$acr_tecpro)
View(acr_tecpro1)
library(caret)
trans <- preProcess(df_limpio[, 2:39], method = c("BoxCox", "center", "scale"))
trans
transformados <- predict(trans, df_limpio[, 2:39])
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados)
View(acr_tecpro1)
model1 <- lm(acr_tecpro ~ ., data = acr_tecpro1)
summary(model1)
plot(acr_tecpro$acr_tecpro, predict(model, acr_tecpro1[, 1:38]))
abline(a = 0, b = 1)
acr_tecpro1 <- cbind(departamento = df_limpio$departamento, transformados)
model1 <- lm(acr_tecpro ~ ., data = acr_tecpro1)
summary(model1)
plot(acr_tecpro$acr_tecpro, predict(model, acr_tecpro1[, 1:38]))
abline(a = 0, b = 1)
acr_tecpro <- df_limpio[, c(2:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, newdata = data.frame(acr_tecpro[, -c(38)])))
abline(coef = c(0, 1))
acr_tecpro <- df_limpio[, c(2:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, newdata = data.frame(acr_tecpro[, -c(39)])))
abline(coef = c(0, 1))
acr_tecpro <- df_limpio[, c(2:39)]
model <- lm(acr_tecpro ~ ., data = acr_tecpro)
summary(model)
plot(acr_tecpro$acr_tecpro, predict(model, acr_tecpro[, -c(39)]))
abline(coef = c(0, 1))
